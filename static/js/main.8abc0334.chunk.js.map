{"version":3,"sources":["Landing/Landing.js","Results/Results.js","App.js","serviceWorker.js","index.js"],"names":["Landing","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","inputValue","evt","setState","target","value","console","log","_this2","react_default","a","createElement","type","onChange","updateInputValue","placeholder","react_router_dom","to","concat","Component","Results","articles","steamID","location","pathname","news","getstuff","_ref","asyncToGenerator","regenerator_default","mark","_callee","getGames","getRecent","list","people","wrap","_context","prev","next","fetch","then","response","json","data","gamepool","hasOwnProperty","games","forEach","game","playtime_forever","push","appid","Promise","all","values","i","filter","item","index","inputArray","indexOf","sent","abrupt","stop","apply","arguments","_ref2","_callee2","_context2","result","gameID","res","appnews","newsitems","article","toConsumableArray","sort","b","date","getNews","setTimeout","Date","toString","substring","hello","map","title","url","author","App","className","react_router","path","exact","component","Boolean","window","hostname","match","ReactDOM","render","basename","process","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.8abc0334.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport {Link} from 'react-router-dom';\r\n//not played in 2 weeks 76561198018232960 3dayrespawn\r\n//has played 2 games in 2 weeks kast master\r\n//plays lots of games\r\nclass Landing extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      inputValue: ''\r\n    };\r\n  }\r\n  componentDidMount() {\r\n   \r\n    \r\n  }\r\n  updateInputValue(evt) {\r\n    this.setState({\r\n      inputValue: evt.target.value\r\n    });\r\n    console.log(this.state)\r\n  }\r\n  render() {\r\n    \r\n    return (\r\n      <div>\r\n        <input type=\"search\" value={this.state.inputValue} onChange={evt => this.updateInputValue(evt)} placeholder=\"Enter steam ID\"/>\r\n      <Link to={`/SteamApp/${this.state.inputValue}`}><div>search</div> </Link>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Landing;\r\n","import React, { Component } from \"react\";\r\n\r\nclass Results extends Component {\r\n  //not played in 2 weeks 76561198018232960 3dayrespawn\r\n  //has played 2 games in 2 weeks kast master 76561198093118389\r\n  //plays lots of games 76561198046981667\r\n  //magic 76561198018404923\r\n  //jorm 76561197968576433\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      articles: []\r\n    };\r\n  }\r\n  componentDidMount() {\r\n    let steamID = this.props.location.pathname;\r\n    console.log(steamID);\r\n\r\n    this.news = [];\r\n    const getstuff = async() => {\r\n      const getGames = () => {\r\n        return (\r\n          fetch(`http://localhost:5000${steamID}`) //fetch the games they have played with more than 50 hours\r\n            //fetch(\"https://ancient-dusk-43980.herokuapp.com/76561198046981667\")\r\n            .then(response => response.json())\r\n            .then(data => {\r\n              let gamepool = [];\r\n              data = data.response;\r\n              if (data.hasOwnProperty(\"games\")) {\r\n                let list = data.games;\r\n                console.log(list);\r\n                list.forEach(game => {\r\n                  if (game.playtime_forever > 5000) {\r\n                    gamepool.push(game.appid);\r\n                  }\r\n                });\r\n              }\r\n              return gamepool;\r\n            })\r\n        );\r\n      };\r\n      const getRecent = () => {\r\n        return (\r\n          fetch(`http://localhost:5000${steamID}/recent`) //fetch the games they have played within the past 2 weeks\r\n            //fetch(\"https://ancient-dusk-43980.herokuapp.com/76561198046981667/recent\")\r\n            .then(response => response.json())\r\n            .then(data => {\r\n              let gamepool = [];\r\n              data = data.response;\r\n              if (data.hasOwnProperty(\"games\")) {\r\n                let list = data.games;\r\n  \r\n                list.forEach(game => {\r\n                  gamepool.push(game.appid); //adding these games to our gamepool\r\n                });\r\n              }\r\n              return gamepool;\r\n            })\r\n        );\r\n      };\r\n      let list = [];\r\n\r\n       const people = await (Promise.all([getGames(), getRecent()])\r\n        .then(values => {\r\n          for (let i = 0; i < 2; i++) {\r\n            //merge both arrays together.\r\n            values[i].forEach(game => {\r\n              list.push(game);\r\n            });\r\n          }\r\n          list = list.filter((item, index, inputArray) => {\r\n            //get rid of any duplicates\r\n            return inputArray.indexOf(item) === index;\r\n          });\r\n          return list;\r\n        })\r\n        )\r\n     return people \r\n    }\r\n    const getNews = async () => {\r\n      await getstuff().then(result => {\r\n        result.forEach(gameID => {\r\n           fetch(`http://localhost:5000/${gameID}/news`)\r\n          .then(res => res.json())\r\n          .then(data => {\r\n            data.appnews.newsitems.forEach(article => {\r\n              this.setState({\r\n                articles: [...this.state.articles, article]\r\n              })\r\n               this.state.articles =  this.state.articles.sort(function(a,b) {\r\n                return b.date - a.date\r\n              })\r\n\r\n            })\r\n    \r\n          })\r\n    \r\n        })\r\n    \r\n      })\r\n      return \"pop\"\r\n    }\r\n    getNews()\r\n    setTimeout(() => {\r\n     this.state.articles.forEach(article => {\r\n       article.date = new Date(article.date*1000).toString().substring(0,15)\r\n     })\r\n      this.setState({\r\n        hello: []\r\n      })\r\n      console.log(this.state)\r\n    }, 3000)\r\n  \r\n  }\r\n  render() {\r\n    return this.state.articles.map(item => {\r\n      return ([<div>{item.title}</div>,<div>{item.url}</div>,<div>{item.author}</div>,<div>{item.date}</div>]);\r\n    });\r\n  }\r\n}\r\n\r\nexport default Results;\r\n","import React from 'react';\nimport {Switch, Route} from  'react-router-dom';\nimport './App.css';\nimport Landing from './Landing/Landing.js'\nimport Results from './Results/Results.js'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Switch>\n      <Route path= {\"/\"} exact component={Landing}/>\n        <Route path= {\"/SteamApp/:id\"} exact component={Results}/>\n      </Switch>\n        \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport {BrowserRouter as Router} from  'react-router-dom';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(  <Router basename={process.env.PUBLIC_URL}>\n    <App />\n</Router>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}