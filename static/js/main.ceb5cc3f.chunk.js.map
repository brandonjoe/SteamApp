{"version":3,"sources":["Page/Page.module.css","Default/Default.module.css","Results/Results.module.css","Landing/Landing.js","Results/Results.js","Page/Page.js","Default/Default.js","App.js","serviceWorker.js","index.js","Landing/Landing.module.css"],"names":["module","exports","container","title","link","button","hour","amount","text","disable","main","articles","private","input","main2","left","ldsdefault","loading","loadcontainer","Landing","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleChangeMonths","months","setState","m","console","log","state","handleChange","value","s","inputValue","disabled","fetch","then","res","json","data","evt","target","length","_this2","_this$state","react_default","a","createElement","className","classes","header","subheader","type","onChange","updateInputValue","placeholder","lib_default","min","max","step","react_router_dom","style","textDecoration","to","concat","Component","Results","isDone","search","name","getstuff","_ref","asyncToGenerator","regenerator_default","mark","_callee","getGames","getRecent","list","fullList","wrap","_context","prev","next","steamID","response","gamepool","hasOwnProperty","games","forEach","game","playtime_forever","push","appid","Promise","all","values","i","filter","item","index","inputArray","indexOf","sent","abrupt","stop","apply","arguments","gamelist","results","getNames","applist","apps","getNews","map","gameID","appnews","newsitems","article","val","sort","b","date","feedname","author","list2","article2","index2","splice","newList","ts","Math","round","Date","getTime","toString","substring","event","_this3","filtergames","toLowerCase","updateSearch","settings","color","href","key","onClick","window","open","url","autor","feed","feedlabel","src","alt","Page","match","params","id","players","personaname","location","pathname","endsWith","includes","pathArray","split","src_Results_Results","Default","App","react_router","path","exact","component","Boolean","hostname","ReactDOM","render","basename","process","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister","conatiner"],"mappings":"4EACAA,EAAAC,QAAA,CAAkBC,UAAA,wBAAAC,MAAA,oBAAAC,KAAA,mBAAAC,OAAA,qBAAAC,KAAA,mBAAAC,OAAA,0CCAlBP,EAAAC,QAAA,CAAkBC,UAAA,2BAAAM,KAAA,sBAAAH,OAAA,wBAAAI,QAAA,6CCAlBT,EAAAC,QAAA,CAAkBS,KAAA,sBAAAC,SAAA,0BAAAR,MAAA,uBAAAC,KAAA,sBAAAQ,QAAA,yBAAAC,MAAA,uBAAAC,MAAA,uBAAAC,KAAA,sBAAAC,WAAA,4BAAAC,QAAA,yBAAAC,cAAA,iSCiIHC,qBA3Hb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAmBRQ,mBAAqB,SAAAC,GACnBR,EAAKS,SAAS,CACZD,OAAQA,IAGK,IAAXA,EAEFR,EAAKS,SAAS,CACZC,EAAG,KAGLV,EAAKS,SAAS,CACZC,EAAG,MAGPC,QAAQC,IAAIZ,EAAKa,MAAML,SAnCNR,EAqCnBc,aAAe,SAAAC,GACbf,EAAKS,SAAS,CAEZM,MAAOA,IAGK,IAAVA,EAEFf,EAAKS,SAAS,CACZO,EAAG,KAGLhB,EAAKS,SAAS,CACZO,EAAG,OAhDPhB,EAAKa,MAAQ,CACXI,WAAY,GACZF,MAAO,GACPP,OAAQ,EACRU,UAAU,EACVF,EAAG,IACHN,EAAG,KARYV,mFAajBmB,MAAK,qDACFC,KAAK,SAAAC,GAAG,OAAIA,EAAIC,SAChBF,KAAK,SAAAG,GAEJZ,QAAQC,IAAIW,8CAsCDC,GACiB,KAA5BA,EAAIC,OAAOV,MAAMW,OACnBvB,KAAKM,SAAS,CACZS,UAAU,IAGZf,KAAKM,SAAS,CACZS,UAAU,IAIdf,KAAKM,SAAS,CACZQ,WAAYO,EAAIC,OAAOV,yCAGlB,IAAAY,EAAAxB,KAAAyB,EACmBzB,KAAKU,MAAvBE,EADDa,EACCb,MAAOP,EADRoB,EACQpB,OACf,OACEqB,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAQpD,WACtBgD,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAQnD,OACtB+C,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAQC,QAAxB,wBACAL,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAQE,WAAxB,sBACqBN,EAAAC,EAAAC,cAAA,QAAMC,UAAWC,IAAQ/C,QAASsB,GADvD,SAC4EL,KAAKU,MAAMH,EADvF,8CAIFmB,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAQ5C,MACtBwC,EAAAC,EAAAC,cAAA,SACEC,UAAWC,IAAQzC,MACnB4C,KAAK,SACLrB,MAAOZ,KAAKU,MAAMI,WAClBoB,SAAU,SAAAb,GAAG,OAAIG,EAAKW,iBAAiBd,IACvCe,YAAY,4BAGdV,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACbH,EAAAC,EAAAC,cAACS,EAAAV,EAAD,CACEW,IAAK,EACLC,IAAK,IACL3B,MAAOA,EACPsB,SAAUlC,KAAKW,eAEjBe,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACbH,EAAAC,EAAAC,cAACS,EAAAV,EAAD,CACEW,IAAK,EACLC,IAAK,GACLC,KAAM,EACN5B,MAAOP,EACP6B,SAAUlC,KAAKI,qBAEjBsB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SAASjB,GACxBc,EAAAC,EAAAC,cAACa,EAAA,EAAD,CACAC,MAAO,CAAEC,eAAgB,QACzBd,UAAWC,IAAQlD,KACnBgE,GAAE,IAAAC,OAAM7C,KAAKU,MAAMI,WAAjB,KAAA+B,OAA+B7C,KAAKU,MAAME,MAA1C,KAAAiC,OAAmD7C,KAAKU,MAAML,SAEhEqB,EAAAC,EAAAC,cAAA,UAAQb,SAAUf,KAAKU,MAAMK,SAAUc,UAAWC,IAAQjD,QAA1D,sBACqB6C,EAAAC,EAAAC,cAAA,QAAMC,UAAWC,IAAQhD,MAAO8B,GADrD,QACwEZ,KAAKU,MAAMG,GACzE,gBAjHFiC,uDC8OPC,cAzOb,SAAAA,EAAYnD,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAA+C,IACjBlD,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAiD,GAAA5C,KAAAH,KAAMJ,KACDc,MAAQ,CACXvB,SAAU,GACV6D,QAAQ,EACRC,OAAQ,GACRC,KAAM,IANSrD,mFAUC,IAAA2B,EAAAxB,KAEZmD,EAAQ,eAAAC,EAAAtD,OAAAuD,EAAA,EAAAvD,CAAAwD,EAAA3B,EAAA4B,KAAG,SAAAC,IAAA,IAAAC,EAAAC,EAAAC,EAAAC,EAAA,OAAAN,EAAA3B,EAAAkC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cACTP,EAAW,WACf,OAAOzC,MAAK,4CAAA6B,OACkCrB,EAAK5B,MAAMqE,UAEtDhD,KAAK,SAAAiD,GAAQ,OAAIA,EAAS/C,SAC1BF,KAAK,SAAAG,GACJ,IAAI+C,EAAW,IACf/C,EAAOA,EAAK8C,UACHE,eAAe,UACXhD,EAAKiD,MACXC,QAAQ,SAAAC,GACPA,EAAKC,iBAAsC,GAAnBhD,EAAK5B,MAAMgB,OACrCuD,EAASM,KAAKF,EAAKG,SAIzB,OAAOP,KAGPT,EAAY,WAChB,OAAO1C,MAAK,4CAAA6B,OAERrB,EAAK5B,MAAMqE,QAFH,YAKThD,KAAK,SAAAiD,GAAQ,OAAIA,EAAS/C,SAC1BF,KAAK,SAAAG,GACJ,IAAI+C,EAAW,IACf/C,EAAOA,EAAK8C,UACHE,eAAe,UACXhD,EAAKiD,MAEXC,QAAQ,SAAAC,GACXJ,EAASM,KAAKF,EAAKG,SAGvB,OAAOP,KAITR,EAAO,GAzCIG,EAAAE,KAAA,EA2CQW,QAAQC,IAAI,CAACnB,IAAYC,MAC7CzC,KAAK,SAAA4D,GACJ,IAAK,IAAIC,EAAI,EAAGA,EAAI,EAAGA,IAErBD,EAAOC,GAAGR,QAAQ,SAAAC,GAChBZ,EAAKc,KAAKF,KAOd,OAJAZ,EAAOA,EAAKoB,OAAO,SAACC,EAAMC,EAAOC,GAE/B,OAAOA,EAAWC,QAAQH,KAAUC,MArD3B,cA2CTrB,EA3CSE,EAAAsB,KAAAtB,EAAAuB,OAAA,SA0DRzB,GA1DQ,wBAAAE,EAAAwB,SAAA9B,MAAH,yBAAAJ,EAAAmC,MAAAvF,KAAAwF,YAAA,GA6DV7B,EAAO,GACP8B,EAAW,GACftC,IAAWlC,KAAK,SAAAyE,GAEd,IAAMC,EAAW3E,MAAK,4CAAA6B,OAElBrB,EAAK5B,MAAMqE,QAFO,cAKnBhD,KAAK,SAAAC,GAAG,OAAIA,EAAIC,SAChBF,KAAK,SAAAG,GAQJ,OAPAA,EAAKwE,QAAQC,KAAKvB,QAAQ,SAAAU,GACxB,IAAIT,EAAO,CACTG,MAAOM,EAAKN,MACZxB,KAAM8B,EAAK9B,MAEbuC,EAAShB,KAAKF,KAETkB,IAELK,EAAUJ,EAAQK,IAAI,SAC1BC,GAD0B,OAG1BhF,MAAK,4CAAA6B,OAA6CmD,EAA7C,UACF/E,KAAK,SAAAC,GAAG,OAAIA,EAAIC,SAChBF,KAAK,SAAAG,GAKJ,OAJAA,EAAK6E,QAAQC,UAAU5B,QAAQ,SAAA6B,GAE7BxC,EAAKc,KAAK0B,KAEL/E,MAIbuE,EAAS1E,KAAK,SAAAmF,GACZzB,QAAQC,IAAIkB,GAAS7E,KAAK,SAAA4D,GAExBlB,EAAK0C,KAAK,SAAC1E,EAAG2E,GAEZ,OAAOA,EAAEC,KAAO5E,EAAE4E,OAEpBd,EAASM,IAAI,SAAAxB,GACXZ,EAAKoC,IAAI,SAAAI,GACHA,EAAQzB,QAAUH,EAAKG,QACzByB,EAAQK,SAAWjC,EAAKrB,UAI9BS,EAAKW,QAAQ,SAAA6B,GACY,KAAnBA,EAAQM,SACVN,EAAQM,OAAS,gBAGrB,IAAIC,EAAQ/C,EACZA,EAAKW,QAAQ,SAAC6B,EAASlB,GACrByB,EAAMpC,QAAQ,SAACqC,EAAUC,IACpBT,EAAQxH,MAAQgI,EAAShI,QAC1BgF,EAAKkD,OAAO5B,EAAM,OAIxB,IAAI6B,EAAU,GACdnD,EAAKW,QAAQ,SAAA6B,GACX,IAAIY,EAAKC,KAAKC,OAAM,IAAIC,MAAOC,UAAY,KAC3CJ,GAA8B,OAApBvF,EAAK5B,MAAMS,OACjB8F,EAAQI,KAAOQ,GACjBD,EAAQrC,KAAK0B,KAGjBW,EAAQxC,QAAQ,SAAA6B,GAEdA,EAAQI,KAAO,IAAIW,KAAoB,IAAff,EAAQI,MAC7Ba,WACAC,UAAU,EAAG,MAElB7F,EAAKlB,SAAS,CAEZnB,SAAU2H,EACV9D,QAAQ,+CAMLsE,GACXtH,KAAKM,SAAS,CACZ2C,OAAQqE,EAAMhG,OAAOV,yCAGhB,IAAA2G,EAAAvH,KACHwH,EAAcxH,KAAKU,MAAMvB,SAAS4F,OAAO,SAAAR,GAC3C,OAEG,IADDA,EAAKiC,SAASiB,cAActC,QAAQoC,EAAK7G,MAAMuC,OAAOwE,iBAI1D,OACE/F,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,SACEK,KAAK,OACLJ,UAAWC,IAAQzC,MACnB+C,YAAY,eACZxB,MAAOZ,KAAKU,MAAMuC,OAClBf,SAAU,SAAAb,GAAG,OAAIkG,EAAKG,aAAarG,MAErCK,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAQ5C,MAEW,IAA/Bc,KAAKU,MAAMvB,SAASoC,SAAsC,IAAtBvB,KAAKU,MAAMsC,OAC/CtB,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAQpC,eAAegC,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAQtC,YAAYkC,EAAAC,EAAAC,cAAA,YAAWF,EAAAC,EAAAC,cAAA,YAAWF,EAAAC,EAAAC,cAAA,YAAWF,EAAAC,EAAAC,cAAA,YAAWF,EAAAC,EAAAC,cAAA,YAAWF,EAAAC,EAAAC,cAAA,YAAWF,EAAAC,EAAAC,cAAA,YAAWF,EAAAC,EAAAC,cAAA,YAAWF,EAAAC,EAAAC,cAAA,YAAWF,EAAAC,EAAAC,cAAA,YAAWF,EAAAC,EAAAC,cAAA,YAAWF,EAAAC,EAAAC,cAAA,aAAiBF,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAQrC,SAAxB,6BACjL,IAA/BO,KAAKU,MAAMvB,SAASoC,SAAsC,IAAtBvB,KAAKU,MAAMsC,OACpDtB,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAQ1C,SAAxB,6CAC6C,IAC3CsC,EAAAC,EAAAC,cAAA,YACEF,EAAAC,EAAAC,cAAA,KACEC,UAAWC,IAAQ6F,SACnBjF,MAAO,CAAEC,eAAgB,OAAQiF,MAAO,QACxCC,KAAK,+CAHP,SAOM,IAVV,8EAcAL,EAAYzB,IAAI,SAACf,EAAMC,GAErB,OACEvD,EAAAC,EAAAC,cAAA,OACEkG,IAAK7C,EACL8C,QAAS,kBAAMC,OAAOC,KAAP,GAAApF,OAAemC,EAAKkD,KAAO,WAC1CrG,UAAWC,IAAQ3C,UAEnBuC,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAQnD,OAAQqG,EAAKrG,OACrC+C,EAAAC,EAAAC,cAAA,OAAKE,QAASA,IAAQxC,OACpBoC,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAQvC,MACtBmC,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAQ4C,OAAxB,SAAsCM,EAAKwB,UAC3C9E,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAQqG,OAAxB,WAAwCnD,EAAKyB,QAC7C/E,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAQsG,MAAxB,SAAqCpD,EAAKqD,WAC1C3G,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAQyE,MAAxB,SAAqCvB,EAAKuB,MAC1C7E,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAQlD,MAAxB,2BAGA8C,EAAAC,EAAAC,cAAA,OAEA0G,IAAG,8CAAAzF,OACDmC,EAAKN,MADJ,eAGH6D,IAAG,YAAA1F,OAAcmC,EAAKwB,SAAnB,iCApOH1D,8BCmEP0F,cAjEb,SAAAA,EAAY5I,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAwI,IACjB3I,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA0I,GAAArI,KAAAH,KAAMJ,KACDc,MAAQ,CACXG,EAAG,IACHN,EAAG,KAJYV,oFAQE,IAAA2B,EAAAxB,KAEVgB,MAAK,4CAAA6B,OACkCrB,EAAK5B,MAAM6I,MAAMC,OAAOC,GAD1D,UAGT1H,KAAK,SAAAiD,GAAQ,OAAIA,EAAS/C,SAC1BF,KAAK,SAAAG,GACJ,OAAOA,IAGIH,KAAK,SAAAmF,GACpB5E,EAAKlB,SAAS,CACZ4C,KAAMkD,EAAIlC,SAAS0E,QAAQ,GAAGC,gBAG9B7I,KAAKJ,MAAMkJ,SAASC,SAASC,SAAS,OAExChJ,KAAKM,SAAS,CACZC,EAAG,KAGHP,KAAKJ,MAAMkJ,SAASC,SAASE,SAAS,QACxCjJ,KAAKM,SAAS,CACZO,EAAG,sCAKP,IAAIqI,EAAYlJ,KAAKJ,MAAMkJ,SAASC,SAASI,MAAM,KACnD,OACEzH,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAQpD,WACtBgD,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAQnD,OAAxB,OACM+C,EAAAC,EAAAC,cAAA,QAAMc,MAAO,CAACkF,MAAO,YAAa5H,KAAKU,MAAMwC,MADnD,gCAC6F,IAC3FxB,EAAAC,EAAAC,cAAA,QAAMC,UAAWC,IAAQ/C,QAASmK,EAAU,IAF9C,SAGGlJ,KAAKU,MAAMH,EAHd,kFAI8B,IAC5BmB,EAAAC,EAAAC,cAAA,QAAMC,UAAWC,IAAQhD,MAAOoK,EAAU,IAL5C,QAMGlJ,KAAKU,MAAMG,EANd,+EASAa,EAAAC,EAAAC,cAACa,EAAA,EAAD,CACEC,MAAO,CAAEC,eAAgB,QACzBd,UAAWC,IAAQlD,KACnBgE,GAAE,KAEFlB,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAQjD,QAAxB,cAAiD,KAEnD6C,EAAAC,EAAAC,cAACwH,EAAD,CACEnF,QAASiF,EAAU,GACnBtI,MAAOsI,EAAU,GACjB7I,OAAQ6I,EAAU,aA3DTpG,8BCYJuG,mLAXP,OACI3H,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAQpD,WACnBgD,EAAAC,EAAAC,cAAA,mBACDF,EAAAC,EAAAC,cAAA,4BACAF,EAAAC,EAAAC,cAAA,+BAAsBF,EAAAC,EAAAC,cAAA,QAAMC,UAAWC,IAAQ9C,MAAOgB,KAAKJ,MAAMkJ,SAASC,UAA1E,kBACArH,EAAAC,EAAAC,cAACa,EAAA,EAAD,CAAMC,MAAO,CAACC,eAAkB,QAAUd,UAAWC,IAAQlD,KAAMgE,GAAE,KAAOlB,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAQjD,QAAxB,yBAA5E,aAPMiE,aCgBPwG,MAbf,WACE,OACE5H,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAC2H,EAAA,EAAD,KACA7H,EAAAC,EAAAC,cAAC2H,EAAA,EAAD,CAAOC,KAAO,IAAKC,OAAK,EAACC,UAAW/J,IACpC+B,EAAAC,EAAAC,cAAC2H,EAAA,EAAD,CAAOC,KAAO,sBAAuBC,OAAK,EAACC,UAAWlB,IACtD9G,EAAAC,EAAAC,cAAC2H,EAAA,EAAD,CAAOG,UAAWL,OCAJM,QACW,cAA7B3B,OAAOc,SAASc,UAEe,UAA7B5B,OAAOc,SAASc,UAEhB5B,OAAOc,SAASc,SAASnB,MACvB,2DCXNoB,IAASC,OAASpI,EAAAC,EAAAC,cAACa,EAAA,EAAD,CAAQsH,SAAUC,aAChCtI,EAAAC,EAAAC,cAACqI,EAAD,OACOC,SAASC,eAAe,SDwH7B,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMrJ,KAAK,SAAAsJ,GACjCA,EAAaC,kCElInBhM,EAAAC,QAAA,CAAkBC,UAAA,2BAAAQ,KAAA,sBAAAG,MAAA,uBAAAR,OAAA,wBAAAF,MAAA,uBAAAoD,OAAA,wBAAAC,UAAA,2BAAAlD,KAAA,sBAAAC,OAAA,wBAAA0L,UAAA","file":"static/js/main.ceb5cc3f.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Page_container__1D7sd\",\"title\":\"Page_title__1nPMM\",\"link\":\"Page_link__1XPas\",\"button\":\"Page_button__ZuEiA\",\"hour\":\"Page_hour__i_Tga\",\"amount\":\"Page_amount__1hFIk\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Default_container__bnkX6\",\"text\":\"Default_text__xSAez\",\"button\":\"Default_button__25b99\",\"disable\":\"Default_disable__1kL8S\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"Results_main__1JASj\",\"articles\":\"Results_articles__p4JyB\",\"title\":\"Results_title__2Ttx4\",\"link\":\"Results_link__UH-gB\",\"private\":\"Results_private__2COTd\",\"input\":\"Results_input__3hTBa\",\"main2\":\"Results_main2__2JSmz\",\"left\":\"Results_left__2rPsA\",\"ldsdefault\":\"Results_ldsdefault__38MwW\",\"loading\":\"Results_loading__cEwap\",\"loadcontainer\":\"Results_loadcontainer__eJ6_M\"};","import React, { Component } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport classes from \"./Landing.module.css\";\r\nimport Slider from \"react-rangeslider\";\r\nimport \"react-rangeslider/lib/index.css\";\r\n\r\nclass Landing extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      inputValue: \"\",\r\n      value: 10,\r\n      months: 6,\r\n      disabled: true,\r\n      s: \"s\",\r\n      m: \"s\"\r\n    };\r\n  }\r\n  componentDidMount() {\r\n\r\n    fetch(`https://ancient-dusk-43980.herokuapp.com/440/news`) //I make this call to the server to wake up heroku's free server.\r\n      .then(res => res.json()) //This call does nothing, the freeplan puts the server to sleep after 30 minutes\r\n      .then(data => {\r\n        //This call will wake the server up so by the time the user gets to the next page, it's alread loaded.\r\n        console.log(data);\r\n      });\r\n  }\r\n  handleChangeMonths = months => {\r\n    this.setState({\r\n      months: months\r\n    })\r\n     \r\n    if (months === 1) {\r\n      //toggles between \"hours\" and hour\"\r\n      this.setState({\r\n        m: \"\"\r\n      });\r\n    } else {\r\n      this.setState({\r\n        m: \"s\"\r\n      });\r\n    }\r\n    console.log(this.state.months)\r\n  }\r\n  handleChange = value => {\r\n    this.setState({\r\n      //set the state as value\r\n      value: value\r\n    });\r\n    \r\n    if (value === 1) {\r\n      //toggles between \"hours\" and hour\"\r\n      this.setState({\r\n        s: \"\"\r\n      });\r\n    } else {\r\n      this.setState({\r\n        s: \"s\"\r\n      });\r\n    }\r\n  };\r\n\r\n  updateInputValue(evt) { //checks to make sure that the user inputs 17 digits\r\n    if (evt.target.value.length === 17) {\r\n      this.setState({\r\n        disabled: false\r\n      });\r\n    } else {\r\n      this.setState({\r\n        disabled: true\r\n      });\r\n\r\n    }\r\n    this.setState({\r\n      inputValue: evt.target.value\r\n    });\r\n  }\r\n  render() {\r\n    const { value, months } = this.state;\r\n    return (\r\n      <div className={classes.container}>\r\n        <div className={classes.title}>\r\n          <div className={classes.header}>Steam News Generator</div>\r\n          <div className={classes.subheader}>\r\n            Recent news within <span className={classes.amount}>{months}</span> month{this.state.m} for your most recent and favorite games!\r\n          </div>\r\n        </div>\r\n        <div className={classes.main}>\r\n          <input\r\n            className={classes.input}\r\n            type=\"search\"\r\n            value={this.state.inputValue}\r\n            onChange={evt => this.updateInputValue(evt)}\r\n            placeholder=\"Enter 17 digit steam ID\"\r\n          />\r\n\r\n          <div className=\"slider\">\r\n            <Slider\r\n              min={1}\r\n              max={100}\r\n              value={value}\r\n              onChange={this.handleChange}\r\n            />\r\n            <div className=\"slider\">\r\n              <Slider\r\n                min={1}\r\n                max={12}\r\n                step={1}\r\n                value={months}\r\n                onChange={this.handleChangeMonths}\r\n              />\r\n              <div className=\"value\">{value}</div>\r\n              <Link\r\n              style={{ textDecoration: \"none\" }}\r\n              className={classes.link}\r\n              to={`/${this.state.inputValue}/${this.state.value}/${this.state.months}`}\r\n            >\r\n              <button disabled={this.state.disabled} className={classes.button}>\r\n                Search games above <span className={classes.hour}>{value}</span> hour{this.state.s}\r\n              </button>{\" \"}\r\n            </Link>\r\n            </div>\r\n           \r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Landing;\r\n","import React, { Component } from \"react\";\r\n\r\nimport classes from \"./Results.module.css\";\r\nclass Results extends Component {\r\n  //for testing steamIDs\r\n  //not played in 2 weeks 76561198018232960\r\n  //has played 2 games in 2 weeks 76561198093118389\r\n  // 76561198046981667\r\n  // 76561198018404923\r\n  // 76561197968576433\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      articles: [],\r\n      isDone: false,\r\n      search: \"\",\r\n      name: \"\"\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    \r\n    const getstuff = async () => {\r\n      const getGames = () => {\r\n        return fetch(\r\n          `https://ancient-dusk-43980.herokuapp.com/${this.props.steamID}`\r\n        ) //fetch the games they have played with more than 50 hours\r\n          .then(response => response.json())\r\n          .then(data => {\r\n            let gamepool = []; //create an array\r\n            data = data.response;\r\n            if (data.hasOwnProperty(\"games\")) {\r\n              let list = data.games; //create a list of the games\r\n              list.forEach(game => {\r\n                if (game.playtime_forever > this.props.value * 60) {\r\n                  gamepool.push(game.appid); //only push to gamepool array if there's more than x hours\r\n                }\r\n              });\r\n            }\r\n            return gamepool; //let getGames return our gamepool list\r\n          });\r\n      };\r\n      const getRecent = () => {\r\n        return fetch(\r\n          `https://ancient-dusk-43980.herokuapp.com/${\r\n            this.props.steamID\r\n          }/recent`\r\n        ) //fetch the games they have played within the past 2 weeks\r\n          .then(response => response.json())\r\n          .then(data => {\r\n            let gamepool = []; //create another gamepool list\r\n            data = data.response;\r\n            if (data.hasOwnProperty(\"games\")) {\r\n              let list = data.games;\r\n\r\n              list.forEach(game => {\r\n                gamepool.push(game.appid); //adding these games to our gamepool\r\n              });\r\n            }\r\n            return gamepool; //return the list of all recent games\r\n          });\r\n      };\r\n\r\n      let list = []; //create a new array that will have our total games\r\n\r\n      const fullList = await Promise.all([getGames(), getRecent()]) //get both the list of games with over 50 hours and recently played games\r\n        .then(values => {\r\n          for (let i = 0; i < 2; i++) {\r\n            //merge both arrays together.\r\n            values[i].forEach(game => {\r\n              list.push(game);\r\n            });\r\n          }\r\n          list = list.filter((item, index, inputArray) => {\r\n            //get rid of any duplicates\r\n            return inputArray.indexOf(item) === index;\r\n          });\r\n          return list;\r\n        });\r\n\r\n      return fullList; //getStuff will return this list of games to search\r\n    };\r\n\r\n    let list = [];\r\n    let gamelist = [];\r\n    getstuff().then(results => { \r\n      // get the list of games\r\n      const getNames = fetch(\r\n        `https://ancient-dusk-43980.herokuapp.com/${\r\n          this.props.steamID\r\n        }/gamelist` //returns a list of every single steam appid and gamename\r\n      )\r\n        .then(res => res.json())\r\n        .then(data => {\r\n          data.applist.apps.forEach(item => { //if the appid matches the appid from our fetched data, pass the name over to the list\r\n            let game = {\r\n              appid: item.appid,\r\n              name: item.name\r\n            };\r\n            gamelist.push(game);\r\n          });\r\n          return gamelist;\r\n        });\r\n      const getNews = results.map((\r\n        gameID //make a promise that i will return an array full of articles\r\n      ) =>\r\n        fetch(`https://ancient-dusk-43980.herokuapp.com/${gameID}/news`)\r\n          .then(res => res.json())\r\n          .then(data => {\r\n            data.appnews.newsitems.forEach(article => {\r\n              //each article, I want to push it to the list\r\n              list.push(article);\r\n            });\r\n            return data;\r\n          })\r\n      );\r\n\r\n      getNames.then(val => {\r\n        Promise.all(getNews).then(values => {\r\n          // once our array of promises is fulfille\r\n          list.sort((a, b) => {\r\n            //get the list and sort them by date\r\n            return b.date - a.date;\r\n          });\r\n          gamelist.map(game => {\r\n            list.map(article => { //this operation takes a while, but basically sets the gamename to an updated game name from steam\r\n              if (article.appid === game.appid) {\r\n                article.feedname = game.name;\r\n              }\r\n            });\r\n          });\r\n          list.forEach(article => { // some articles don't have any authors in the preview, tells the user click the article if they want need to know who the author is\r\n            if (article.author === \"\") {\r\n              article.author = \"In article\";\r\n            }\r\n          });\r\n          let list2 = list; // sometimes steam's api returns 2 of the same articles from \"rock, paper, shotgun\", this removes one of them. \r\n          list.forEach((article, index) => {\r\n            list2.forEach((article2, index2) => {\r\n              if(article.title = article2.title) {\r\n                list.splice(index,1)\r\n              }\r\n            })\r\n          })\r\n          let newList = [];\r\n          list.forEach(article => { //this first turns turns everything to unix, and returns everything before a certain date\r\n            let ts = Math.round(new Date().getTime() / 1000);\r\n            ts = ts - this.props.months * 2582000;\r\n            if (article.date > ts) {\r\n              newList.push(article);\r\n            }\r\n          });\r\n          newList.forEach(article => {\r\n            //get the articles and convert it unix to date format\r\n            article.date = new Date(article.date * 1000)\r\n              .toString() //turn it into a string\r\n              .substring(0, 15); //truncate off the time and seconds, only return day and date\r\n          });\r\n          this.setState({\r\n            //set the state.articles to the list, a change in state should trigger a rerender\r\n            articles: newList,\r\n            isDone: true\r\n          });\r\n        });\r\n      });\r\n    });\r\n  }\r\n  updateSearch(event) { //passes search filter to state\r\n    this.setState({\r\n      search: event.target.value\r\n    });\r\n  }\r\n  render() { //let the showed games only be games within the search filter, if nothing's in it, then show everything\r\n    let filtergames = this.state.articles.filter(game => {\r\n      return (\r\n        game.feedname.toLowerCase().indexOf(this.state.search.toLowerCase()) !==\r\n        -1\r\n      );\r\n    });\r\n    return (\r\n      <div>\r\n        <input\r\n          type=\"text\"\r\n          className={classes.input}\r\n          placeholder=\"Filter games\"\r\n          value={this.state.search}\r\n          onChange={evt => this.updateSearch(evt)}\r\n        />\r\n        <div className={classes.main}>\r\n\r\n          {(this.state.articles.length === 0 && this.state.isDone === false) ? // show the loading spinner\r\n          ( <div className={classes.loadcontainer}><div className={classes.ldsdefault}><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div><div className={classes.loading}>Loading your articles...</div></div>\r\n            ) : (this.state.articles.length === 0 && this.state.isDone === true) ? ( // if nothing comes back, the length is 0, and that means their profile is private. \r\n            <div className={classes.private}>\r\n              Unable to retrieve data from server. Check{\" \"}\r\n              <span>\r\n                <a\r\n                  className={classes.settings}\r\n                  style={{ textDecoration: \"none\", color: \"grey\" }}\r\n                  href=\"https://steamcommunity.com/my/edit/settings\"\r\n                >\r\n                  here\r\n                </a>\r\n              </span>{\" \"}\r\n              to make sure your profile settings are public or try a different steam ID.\r\n            </div>\r\n          ) : (\r\n            filtergames.map((item, index) => {\r\n              //loop through each filtered, this doesn't return null because we initialized this.state.articles as an empty array\r\n              return (\r\n                <div\r\n                  key={index}\r\n                  onClick={() => window.open(`${item.url}`, \"_blank\")}\r\n                  className={classes.articles}\r\n                >\r\n                  <div className={classes.title}>{item.title}</div>\r\n                  <div classes={classes.main2}>\r\n                    <div className={classes.left}>\r\n                      <div className={classes.appid}>Game: {item.feedname}</div>\r\n                      <div className={classes.autor}>Author: {item.author}</div>\r\n                      <div className={classes.feed}>Feed: {item.feedlabel}</div>\r\n                      <div className={classes.date}>Date: {item.date}</div>\r\n                      <div className={classes.link}>Click for full article</div>\r\n                    </div>\r\n                   \r\n                      <img\r\n                      \r\n                      src={`https://steamcdn-a.akamaihd.net/steam/apps/${\r\n                        item.appid\r\n                      }/header.jpg`}\r\n                      alt={`Image of ${item.feedname} couldn't load`} //if the image can't load, the user is notified. \r\n                    />\r\n                  </div>\r\n                </div>\r\n              );\r\n            })\r\n          )}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Results;\r\n","import React, { Component } from \"react\";\r\nimport Results from \"../Results/Results\";\r\nimport classes from \"./Page.module.css\";\r\nimport { Link } from \"react-router-dom\";\r\nclass Page extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      s: \"s\",\r\n      m: \"s\"\r\n    };\r\n  }\r\n  //#3a9ed8\r\n  componentWillMount() {\r\n    const getpersonaname = () => { //get the name of the steamID\r\n      return fetch(\r\n        `https://ancient-dusk-43980.herokuapp.com/${this.props.match.params.id}/name`\r\n      )\r\n        .then(response => response.json())\r\n        .then(data => {\r\n          return data;\r\n        });\r\n    };\r\n    getpersonaname().then(val => {\r\n      this.setState({\r\n        name: val.response.players[0].personaname\r\n      });\r\n    });\r\n    if (this.props.location.pathname.endsWith(\"/1\")) {\r\n      //check to see if they put more than 1 hour, if they did, \"hours\" is plural, if they didn't \"hour\" is singular without \"s\"\r\n      this.setState({\r\n        m: \"\"\r\n      });\r\n    }\r\n    if (this.props.location.pathname.includes(\"/1/\")) {\r\n      this.setState({\r\n        s: \"\"\r\n      });\r\n    }\r\n  }\r\n  render() {\r\n    let pathArray = this.props.location.pathname.split(\"/\"); //we need to split the array to pass in steamID and hours as props\r\n    return (\r\n      <div className={classes.container}>\r\n        <div className={classes.title}>\r\n          Hey <span style={{color: \"#3a9dd7\"}}>{this.state.name}</span>, here's news within the past{\" \"}\r\n          <span className={classes.amount}>{pathArray[3]}</span> month\r\n          {this.state.m} for games you've played recently, as well as games\r\n          you've played for more than{\" \"}\r\n          <span className={classes.hour}>{pathArray[2]}</span> hour\r\n          {this.state.s}. If the list is smaller than you think, check your\r\n          steam privacy settings!\r\n        </div>\r\n        <Link\r\n          style={{ textDecoration: \"none\" }}\r\n          className={classes.link}\r\n          to={`/`}\r\n        >\r\n          <div className={classes.button}>New Search</div>{\" \"}\r\n        </Link>\r\n        <Results\r\n          steamID={pathArray[1]}\r\n          value={pathArray[2]}\r\n          months={pathArray[3]}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Page;\r\n","import React, { Component } from 'react';\r\nimport classes from './Default.module.css';\r\nimport { Link } from \"react-router-dom\";\r\nclass Default extends Component {\r\n    render() {\r\n        return (\r\n            <div className={classes.container}>\r\n                 <h1>error</h1>\r\n                <h2>page not found</h2>\r\n                <h3>the requested URL <span className={classes.text}>{this.props.location.pathname}</span> was not found</h3>\r\n                <Link style={{'textDecoration': 'none'}}  className={classes.link} to={`/`}><div className={classes.button}>Click here to go back</div> </Link>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Default;","import React from 'react';\nimport {Switch, Route} from  'react-router-dom';\nimport './App.css';\nimport Landing from './Landing/Landing.js'\nimport Page from './Page/Page.js'\nimport Default from './Default/Default'\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Switch>\n      <Route path= {\"/\"} exact component={Landing}/>\n      <Route path= {\"/:id/:value/:months\"} exact component={Page}/>\n      <Route component={Default}/>\n      </Switch>\n        \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport {BrowserRouter as Router} from  'react-router-dom';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(  <Router basename={process.env.PUBLIC_URL}>\n    <App />\n</Router>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Landing_container__3cFkZ\",\"main\":\"Landing_main__TO3Of\",\"input\":\"Landing_input__FKYRR\",\"button\":\"Landing_button__3Jkyp\",\"title\":\"Landing_title__3Fy2R\",\"header\":\"Landing_header__3OomK\",\"subheader\":\"Landing_subheader__2vVjk\",\"hour\":\"Landing_hour__1xuB_\",\"amount\":\"Landing_amount__1JcXb\",\"conatiner\":\"Landing_conatiner__2kdFI\"};"],"sourceRoot":""}