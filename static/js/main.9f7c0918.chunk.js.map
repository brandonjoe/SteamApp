{"version":3,"sources":["Landing/Landing.js","Results/Results.js","App.js","serviceWorker.js","index.js"],"names":["Landing","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","inputValue","evt","setState","target","value","console","log","_this2","react_default","a","createElement","type","onChange","updateInputValue","placeholder","react_router_dom","to","concat","Component","Results","steamID","location","pathname","gamepool","self","news","fetch","then","response","json","data","hasOwnProperty","list","games","forEach","game","playtime_forever","push","appid","filter","item","index","inputArray","indexOf","gameID","appnews","newsitems","neww","total","items","map","title","App","className","react_router","path","exact","component","Boolean","window","hostname","match","ReactDOM","render","basename","process","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.9f7c0918.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport {Link} from 'react-router-dom';\r\n//not played in 2 weeks 76561198018232960 3dayrespawn\r\n//has played 2 games in 2 weeks kast master\r\n//plays lots of games\r\nclass Landing extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      inputValue: ''\r\n    };\r\n  }\r\n  componentDidMount() {\r\n   \r\n    \r\n  }\r\n  updateInputValue(evt) {\r\n    this.setState({\r\n      inputValue: evt.target.value\r\n    });\r\n    console.log(this.state)\r\n  }\r\n  render() {\r\n    \r\n    return (\r\n      <div>\r\n        <input type=\"search\" value={this.state.inputValue} onChange={evt => this.updateInputValue(evt)} placeholder=\"Enter steam ID\"/>\r\n      <Link to={`/${this.state.inputValue}`}><div>search</div> </Link>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Landing;\r\n","import React, { Component } from \"react\";\r\nclass Results extends Component {\r\n  //not played in 2 weeks 76561198018232960 3dayrespawn\r\n  //has played 2 games in 2 weeks kast master\r\n  //plays lots of games 76561198046981667\r\n  //magic 76561198018404923\r\n  //jorm 76561197968576433 \r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n        \r\n    };\r\n}\r\n  componentWillMount() {\r\n    let steamID = this.props.location.pathname;\r\n    console.log(steamID);\r\n    let gamepool = [];\r\n    const self = this;\r\n    this.news = [];\r\n    fetch(`http://localhost:5000${steamID}`) //fetch the games they have played with more than 50 hours\r\n      //fetch(\"https://ancient-dusk-43980.herokuapp.com/76561198046981667\")\r\n      .then(response => response.json())\r\n      .then(data => {\r\n        data = data.response;\r\n        if (data.hasOwnProperty(\"games\")) {\r\n          let list = data.games;\r\n          console.log(list);\r\n          list.forEach(game => {\r\n            if (game.playtime_forever > 2250) {\r\n               gamepool.push(game.appid);\r\n            }\r\n          });\r\n        }\r\n        fetch(`http://localhost:5000${steamID}/recent`) //fetch the games they have played within the past 2 weeks\r\n          //fetch(\"https://ancient-dusk-43980.herokuapp.com/76561198046981667/recent\")\r\n          .then(response => response.json())\r\n          .then(data => {\r\n            data = data.response;\r\n            if (data.hasOwnProperty(\"games\")) {\r\n              let list = data.games;\r\n\r\n              list.forEach(game => {\r\n                 gamepool.push(game.appid); //adding these games to our gamepool\r\n              });\r\n            }\r\n            gamepool = gamepool.filter((item, index, inputArray) => {\r\n              return inputArray.indexOf(item) === index;   //removing the duplicates\r\n            });\r\n            console.log(gamepool);\r\n            return gamepool;\r\n          })\r\n          .then(gamepool => {\r\n            gamepool.forEach(gameID => {\r\n              fetch(`http://localhost:5000/${gameID}/news`)\r\n                .then(response => response.json())\r\n                .then(data => {\r\n                  data = data.appnews.newsitems;\r\n                  data.forEach(neww => {\r\n                    this.news.push(neww);\r\n                    self.setState({total: this.news})\r\n                  });\r\n\r\n                })\r\n               \r\n            });\r\n         \r\n          })\r\n      })\r\n\r\n  }\r\n \r\n  render() {\r\n \r\n    if(this.state && this.state.total){\r\n        var items = this.state.total.map(item => {\r\n            return <h1>{item.title}</h1>\r\n        })\r\n    }\r\n    \r\n    \r\n     \r\n    return <div>\r\n        <h1>asdfdsf</h1>\r\n\r\n     \r\n       <div>{items}</div>\r\n    \r\n    </div>\r\n  }\r\n}\r\n\r\nexport default Results;\r\n","import React from 'react';\nimport {Switch, Route} from  'react-router-dom';\nimport './App.css';\nimport Landing from './Landing/Landing.js'\nimport Results from './Results/Results.js'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Switch>\n      <Route path= {\"/\"} exact component={Landing}/>\n        <Route path= {\"/:id\"} exact component={Results}/>\n      </Switch>\n        \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport {BrowserRouter as Router} from  'react-router-dom';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(  <Router basename={process.env.PUBLIC_URL}>\n    <App />\n</Router>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}